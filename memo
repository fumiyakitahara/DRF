モデルは「モデルマネージャ」と呼ばれるデータベースのテーブルレベルのクエリ操作をするためのクエリセットAPIのインターフェースを持っている。
モデルマネージャを経由して、データベースにアクセスする。

 filter.getは検索結果が1以外の場合、例外エラーが発生するので基本的にはpkを使う

 from django.db import transaction でトランザクションができるようになる

 ・シリアライザ
JSON文字列とモデルオブジェクトの相互変換をしてくれるもの
モデルとシリアライザのフィールドクラスの対応がある。モデルのものが引き継がれる
ModelSerializerはモデルのフィールド定義をベースにしたものになる場合使う
ListSerializer 一覧取得APIや関連先のモデルを参照するためのシリアライ座
デシリアライズは文字列(JSON)からオブジェクトに変換するもの
data ->is_valid()で検証 ->_validated date -> save()でモデルに保存

・ビュー
Djangoのビューの大まかな役割は、リクエストオブジェクトを受け取り、レスポンスオブジェクトを作成して返すこと
ビューの流れ 1.シリアライザオブジェクトの作成>2.バリデーションを実行>3.モデルオブジェクトを登録>4.レスポンスオブジェクトを作成
 
APIViewにはdispatchメソッドがあり、ハンドラメソッドを呼び出す前に実行される。さまざまな処理をしてくれている。
dispatchメソッド
1.Djangoのリクエストオブジェクトをrest_framework.request.Requestに変換
2.リクエストの内容とコンテンツネゴシエータによって、利用する連打楽ラストメディアタイプの決定
3.リクエストの内容からAPIのバージョンを特定してリクエストのversion属性にセット
4.認証チェック
5.パーミッションチェック
6.スロットリング(リクエストの回数制限をsettingsで制御可能)
7.ハンドラメソッドやアクションメソッドを呼ぶ

・URLconf
urls.py urlpatternsというlist型の変数が、ビューのマッチング情報を保持している.
ModelViewSet系ビューの場合のみ、DRF独自のRouterクラスを使ってURLconfに追加する。

